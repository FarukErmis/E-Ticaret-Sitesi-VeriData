// <auto-generated />
using System;
using CommercialSite.Model.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace CommercialSite.Model.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20211004174744_ProductCommentSeed")]
    partial class ProductCommentSeed
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("CommercialSite.Model.Entities.Brand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedIp")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedIp")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("UpdatedUserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("UpdatedUserId");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            Id = new Guid("02f1536b-f064-4e37-bd2b-4615dbf0fff3"),
                            BrandName = "ACER",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("3acec2fb-4d89-49b1-9618-86b9ea83d927"),
                            BrandName = "Lenovo",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("63080251-d865-4827-958b-36c65bc596da"),
                            BrandName = "Samsung",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("2129962f-6420-4287-a637-7f7b6616f566"),
                            BrandName = "Apple",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("7159a708-cedc-42d4-afbf-c869239b2f54"),
                            BrandName = "Xiaomi",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("1b26fdd8-3e6a-43d0-ad7d-29a0404e7e09"),
                            BrandName = "Oppo",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("12af0f20-7e67-4a1f-96a8-0374200b72da"),
                            BrandName = "Philips",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("d3624a21-aeef-4228-bb6a-9766d105fab9"),
                            BrandName = "LG",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("b0203e1e-ffc7-41bc-94da-2eeb927d1141"),
                            BrandName = "Reeder",
                            Status = 1
                        });
                });

            modelBuilder.Entity("CommercialSite.Model.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedIp")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedIp")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("UpdatedUserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("UpdatedUserId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("db635022-de6d-4c3c-915c-e0225f879e1f"),
                            CategoryName = "Bilgisayar",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("38e7ac16-39e7-44ce-a6f1-f9ad1dc9f825"),
                            CategoryName = "Telefon",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("1990e5f9-5e0b-4d9d-ac58-ac634c5421f6"),
                            CategoryName = "Tablet",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("07368515-0d44-4fb3-93cd-36c39be34f39"),
                            CategoryName = "Televizyon",
                            Status = 1
                        });
                });

            modelBuilder.Entity("CommercialSite.Model.Entities.CommentReaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedIp")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductCommentId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedIp")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("UpdatedUserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ProductCommentId");

                    b.HasIndex("UpdatedUserId");

                    b.ToTable("CommentReactions");
                });

            modelBuilder.Entity("CommercialSite.Model.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BrandId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedIp")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<double?>("DiscountPrice")
                        .HasColumnType("double precision");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<int?>("Rate")
                        .HasColumnType("integer");

                    b.Property<int?>("ReviewNumber")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedIp")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("UpdatedUserId")
                        .HasColumnType("uuid");

                    b.Property<double>("WithoutDiscountPrice")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("UpdatedUserId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6005a898-3f64-41ba-a5d2-7a23e9af7db5"),
                            BrandId = new Guid("2cb8bfab-ff82-41bd-bf39-84d3e5b6ef89"),
                            CategoryId = new Guid("9361933a-b73c-4d1d-9dd1-ecfc816b3e6d"),
                            DiscountPrice = 12.199,
                            ProductName = "Acer Nitro 5 Intel Core i7 10750H",
                            Rate = 4,
                            ReviewNumber = 0,
                            Status = 0,
                            WithoutDiscountPrice = 14.999000000000001
                        },
                        new
                        {
                            Id = new Guid("ff306211-490c-41a2-8515-50825b8e07c4"),
                            BrandId = new Guid("2cb8bfab-ff82-41bd-bf39-84d3e5b6ef89"),
                            CategoryId = new Guid("9361933a-b73c-4d1d-9dd1-ecfc816b3e6d"),
                            DiscountPrice = 17.998999999999999,
                            ProductName = "Acer Predator Triton 500 Intel Core i7 10750H",
                            Rate = 5,
                            ReviewNumber = 0,
                            Status = 0,
                            WithoutDiscountPrice = 23.959
                        },
                        new
                        {
                            Id = new Guid("080f0578-7637-4cfa-8a3f-29fca1ce6755"),
                            BrandId = new Guid("af6273bb-dc30-4a61-9aeb-8225636f564a"),
                            CategoryId = new Guid("9361933a-b73c-4d1d-9dd1-ecfc816b3e6d"),
                            DiscountPrice = 7.5990000000000002,
                            ProductName = "Lenovo IdeaPad Gaming 3 AMD Ryzen 5 4600H",
                            Rate = 3,
                            ReviewNumber = 0,
                            Status = 0,
                            WithoutDiscountPrice = 11.109
                        },
                        new
                        {
                            Id = new Guid("5acae9eb-43a1-4309-8477-35f706007ba5"),
                            BrandId = new Guid("076bff1f-6c72-4eca-9bf9-1fe491a108b4"),
                            CategoryId = new Guid("8d0de41d-191a-469f-8909-61c169df2d8e"),
                            DiscountPrice = 4.899,
                            ProductName = "Samsung Galaxy Tab S7 SM-T870 128 GB Tablet",
                            Rate = 4,
                            ReviewNumber = 0,
                            Status = 0,
                            WithoutDiscountPrice = 5.7990000000000004
                        },
                        new
                        {
                            Id = new Guid("e7f2e215-4b01-4669-bd01-cbdea8a666c2"),
                            BrandId = new Guid("af6273bb-dc30-4a61-9aeb-8225636f564a"),
                            CategoryId = new Guid("8d0de41d-191a-469f-8909-61c169df2d8e"),
                            DiscountPrice = 1.829,
                            ProductName = "Lenovo TAB M10 TB-X606F 64GB 10.3 Wi Fi Tablet Gri ZA5T0215TR",
                            Rate = 4,
                            ReviewNumber = 0,
                            Status = 0,
                            WithoutDiscountPrice = 2.9990000000000001
                        },
                        new
                        {
                            Id = new Guid("8180f3c6-de35-42a7-abf2-2e8bae7b2fdd"),
                            BrandId = new Guid("e49c6a75-5835-471e-918a-3345bbb26809"),
                            CategoryId = new Guid("8d0de41d-191a-469f-8909-61c169df2d8e"),
                            DiscountPrice = 1.399,
                            ProductName = "Reeder M10 Blue Max 64GB 4G LTE",
                            Rate = 4,
                            ReviewNumber = 0,
                            Status = 0,
                            WithoutDiscountPrice = 2.2989999999999999
                        },
                        new
                        {
                            Id = new Guid("fe9354be-4c0d-44bf-ad40-165fad2fd8dd"),
                            BrandId = new Guid("1a7c509d-42e2-4213-a944-212f07222084"),
                            CategoryId = new Guid("21f8242e-dd3a-4280-85ad-3bce8bbe4c8c"),
                            DiscountPrice = 4.399,
                            ProductName = "LG 43UN71006LB 43 Inç 108 Ekran Uydu Alıcılı 4K Ultra HD Smart LED TV",
                            Rate = 4,
                            ReviewNumber = 0,
                            Status = 0,
                            WithoutDiscountPrice = 5.9989999999999997
                        },
                        new
                        {
                            Id = new Guid("475f5a5b-f162-42d6-bd6e-97400e3f3813"),
                            BrandId = new Guid("6520d7be-be4d-4b0d-a222-7e3d90c42de1"),
                            CategoryId = new Guid("21f8242e-dd3a-4280-85ad-3bce8bbe4c8c"),
                            DiscountPrice = 5.1989999999999998,
                            ProductName = "Philips 50PUS7805 50 Inç 126 Ekran Uydu Alıcılı 4K Ultra HD LED Smart TV",
                            Rate = 4,
                            ReviewNumber = 0,
                            Status = 0,
                            WithoutDiscountPrice = 8.1989999999999998
                        },
                        new
                        {
                            Id = new Guid("803a9abd-c677-4fb7-a8f6-99f672f7c458"),
                            BrandId = new Guid("e49c6a75-5835-471e-918a-3345bbb26809"),
                            CategoryId = new Guid("afa8a153-6eed-4ad2-a453-dc6d2f86caab"),
                            DiscountPrice = 1.5489999999999999,
                            ProductName = "Reeder P13 Blue Max 64 GB (Reeder Türkiye Garantili)",
                            Rate = 3,
                            ReviewNumber = 0,
                            Status = 0,
                            WithoutDiscountPrice = 2.0489999999999999
                        },
                        new
                        {
                            Id = new Guid("3ee5d179-bb97-4fd2-9906-35e87413b85f"),
                            BrandId = new Guid("14534656-c0d2-44cf-922c-6fc83a21c203"),
                            CategoryId = new Guid("afa8a153-6eed-4ad2-a453-dc6d2f86caab"),
                            DiscountPrice = 3.3180000000000001,
                            ProductName = "Oppo Reno 4 Lite 128 GB (Oppo Türkiye Garantili)",
                            Rate = 4,
                            ReviewNumber = 0,
                            Status = 0,
                            WithoutDiscountPrice = 3.5990000000000002
                        },
                        new
                        {
                            Id = new Guid("b2f6e943-adbe-43f9-bd2f-f70cc4b6965e"),
                            BrandId = new Guid("ad3869c4-0631-4d56-8fc3-12b9afd7d40a"),
                            CategoryId = new Guid("afa8a153-6eed-4ad2-a453-dc6d2f86caab"),
                            DiscountPrice = 4.2990000000000004,
                            ProductName = "Xiaomi Redmi Note 10 Pro 128 GB 8 GB RAM (Xiaomi Türkiye Garantili)",
                            Rate = 4,
                            ReviewNumber = 0,
                            Status = 0,
                            WithoutDiscountPrice = 3.7989999999999999
                        },
                        new
                        {
                            Id = new Guid("0a041c01-d322-431c-9326-162dadd48504"),
                            BrandId = new Guid("076bff1f-6c72-4eca-9bf9-1fe491a108b4"),
                            CategoryId = new Guid("afa8a153-6eed-4ad2-a453-dc6d2f86caab"),
                            DiscountPrice = 11.249000000000001,
                            ProductName = "Samsung Galaxy Note 20 Ultra 256 GB (Samsung Türkiye Garantili)",
                            Rate = 4,
                            ReviewNumber = 0,
                            Status = 0,
                            WithoutDiscountPrice = 12.298999999999999
                        },
                        new
                        {
                            Id = new Guid("5fe240ee-1611-4a90-9bfc-4ac38099af1f"),
                            BrandId = new Guid("877bdb84-f2f3-4143-aae4-b1a5e6103781"),
                            CategoryId = new Guid("afa8a153-6eed-4ad2-a453-dc6d2f86caab"),
                            DiscountPrice = 13.999000000000001,
                            ProductName = "iPhone XS Max 256 GB",
                            Rate = 4,
                            ReviewNumber = 0,
                            Status = 0,
                            WithoutDiscountPrice = 14.999000000000001
                        });
                });

            modelBuilder.Entity("CommercialSite.Model.Entities.ProductComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedIp")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<string>("Rate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int?>("ThumbDown")
                        .HasColumnType("integer");

                    b.Property<int?>("ThumbsUp")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedIp")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("UpdatedUserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UpdatedUserId");

                    b.ToTable("ProductComments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e92791ca-9448-42b3-8d4d-7b248963f813"),
                            Comment = "cihaz harika ancak 2080 max-q olması desktop versiyonda 2070'e denk geldiği nutulmamalı.Oyunlarda overclocklu hali ile gayet tatmin edici fps'ler sunuyor.tavsiye olunur.",
                            CreatedDate = new DateTime(2021, 10, 4, 20, 47, 43, 409, DateTimeKind.Local).AddTicks(421),
                            CreatedUserId = new Guid("88fe5ec9-7b96-4a90-be4d-06a69d95ef42"),
                            ProductId = new Guid("2322717a-d36d-4299-af9f-2b6faedd1423"),
                            Rate = "5",
                            Status = 0,
                            ThumbDown = 4,
                            ThumbsUp = 6
                        },
                        new
                        {
                            Id = new Guid("5455bab6-dc9f-4a7b-9ae0-ae0f68f6762a"),
                            Comment = "Öncelikle hızlı kargo gönderimi için Hepsi Buradaya teşekkür ederim. Ürün elime hasarsız bir ekilde ulaştı. Kutulama oldukça başarılı. Ürün gerçekten çok kaliteli. Hem iş hem de oyun amaçlı olarak ullanılabiliyor. Performans olarak Harika bir ürün herkese gönül rahatlığıyla tavsiye ederim.",
                            CreatedDate = new DateTime(2021, 10, 4, 20, 47, 43, 409, DateTimeKind.Local).AddTicks(1906),
                            CreatedUserId = new Guid("88fe5ec9-7b96-4a90-be4d-06a69d95ef42"),
                            ProductId = new Guid("2322717a-d36d-4299-af9f-2b6faedd1423"),
                            Rate = "5",
                            Status = 0,
                            ThumbDown = 4,
                            ThumbsUp = 6
                        },
                        new
                        {
                            Id = new Guid("e66f1413-5c95-4f6f-bfec-912f5950ba24"),
                            Comment = "Ürün gayet başarılı, 512 gb ssdli modeli yerine tercih ettim, kurulum sıkıntı oldu, riverleri mutlaka lenovonun kendi sitesinden indirmenizi tavsiye ederim, satıcı güzel, iletişimi iyiydi.",
                            CreatedDate = new DateTime(2021, 10, 4, 20, 47, 43, 409, DateTimeKind.Local).AddTicks(1964),
                            CreatedUserId = new Guid("88fe5ec9-7b96-4a90-be4d-06a69d95ef42"),
                            ProductId = new Guid("49669332-44e1-4696-84c0-9ab229061315"),
                            Rate = "5",
                            Status = 0,
                            ThumbDown = 4,
                            ThumbsUp = 6
                        },
                        new
                        {
                            Id = new Guid("1809e98a-5dcf-48f7-9e55-56a482cc8900"),
                            Comment = "Ürün fotoğraflardaki gibi 3 4 saattir kurulum için kullanıyorum gayet hızlı.İstanbul içinde seniz kargo süreci çok hızlı bir şekilde işliyor. Free dos olduğu için format attıktan sonra ilk iş windowsu son sürümegüncelleyin daha sonra kurulum yapın.Lenovo sitesindeki sürücülerin bazıları windows son sürüm olmadığı için kurulmuyorözellikle ekran kartları. Klavye hissiyatı çok iyi. Satıcı ilgili aradığımda direkt çözüm odaklı konuştular. Gerekli azılımları indirmenizi tavsiye ederim. Düşünmeden alabilirsiniz",
                            CreatedDate = new DateTime(2021, 10, 4, 20, 47, 43, 409, DateTimeKind.Local).AddTicks(1988),
                            CreatedUserId = new Guid("88fe5ec9-7b96-4a90-be4d-06a69d95ef42"),
                            ProductId = new Guid("a7630777-3514-46e6-8f46-ff84d48a32a8"),
                            Rate = "5",
                            Status = 0,
                            ThumbDown = 4,
                            ThumbsUp = 6
                        },
                        new
                        {
                            Id = new Guid("88936dd2-d7d0-440e-b569-33b75371eb83"),
                            Comment = "Ürün iyi hoş güzel de aga bu nasıl bir dolar kuru, adam bunu 400 500 lira sayıp alıyor biz iye 2 asgari ücretten fazla koyuyoz Allah aşkına ya.  Not: Almanya bizi kıskanıyor :'(",
                            CreatedDate = new DateTime(2021, 10, 4, 20, 47, 43, 409, DateTimeKind.Local).AddTicks(2001),
                            CreatedUserId = new Guid("88fe5ec9-7b96-4a90-be4d-06a69d95ef42"),
                            ProductId = new Guid("cf64d3ff-a595-4f9e-a4d6-11ebc21905aa"),
                            Rate = "5",
                            Status = 0,
                            ThumbDown = 4,
                            ThumbsUp = 6
                        },
                        new
                        {
                            Id = new Guid("94d6b2ee-149e-44a5-8b40-701518d61eea"),
                            Comment = "Öncelikle Ürünü alış sebebim laptopu internette bişeyler bakmak, alışveriş yapmak sosyal edyada takılmak için kullanırken ağır olması şarjının çok gitmemesiydi. Ben öyle oyun oynayan biri değilim o yüzden yun performansı açısından bir değerlendirme yapamayacağım. Ürün beklediğim gibi. Bilgisayardan google chrome'a nasıl idiyorsanız bu cihazla da aynen girebiliyorsunuz. Şarj konusuna gelirsek net 6 saat ekran açık İnternette ezinebiliyorsunuz. Cihazın hoparlörlerinden gelen ses çok başarılı ancak kulaklık konusunda çok iddialı değil. Aşağıda orumda arkadaş usb bellekleri görmüyor demiş ben çatır çutur takıyorum gayette görüyor. Cihazın iki kusuru var bence irincisi yeni olduğundan dolayı kılıf olsun ekran koruyucu olsun bu tarz aksesuarlar açısından sıkıntısı var. İkincisi e batarya biraz daha büyük olabilirdi. Ancak şunu da söyleyeyim bu aralar işe gitmiyor oluşum ve cihazın yeni oluşundanötürü sürekli elimde olması da pilini yeterli bulmamamda etkili bir faktördür. Sonuç olarak benim aldığım amaçla lacaklara tavsiye ederim.Kargo gayet hızlı sitenin tahmini olarak size söylediği tarihten 2 gün önce elinize laşıyor.",
                            CreatedDate = new DateTime(2021, 10, 4, 20, 47, 43, 409, DateTimeKind.Local).AddTicks(2018),
                            CreatedUserId = new Guid("88fe5ec9-7b96-4a90-be4d-06a69d95ef42"),
                            ProductId = new Guid("ebf25e2d-15e5-4133-ad82-156f83f4ce96"),
                            Rate = "5",
                            Status = 0,
                            ThumbDown = 4,
                            ThumbsUp = 6
                        },
                        new
                        {
                            Id = new Guid("70a8a21d-6541-4e19-8bcf-9ab26569c278"),
                            Comment = "Televizyonun Artıları: + iPhone ile tam uyumlu olması + Hızlı açılış süresi + Menülerdeki kıcılık + Fiyat performans ürünü Eksileri - Kanal geçişleri bazen can sıkabiliyor - Menünün bazı kısımları yavaş alışıyor - Görüntü ayarlarında istenen rengi yakalamak olması gerekenden zor. Genel olarak ben üründen memnunum.Daha yi olabilirdi ancak o zamanda tabiki fiyatı daha da yüksek olacaktı.Ayrıca satın aldığım satıcının paketlemesi oldukça yi.Sadece kutusu ile göndermeyip dışına birde kabarcıklı poşet sarması teslimat sırasında kontrol etmenizi çok çok olaylaştırıyor.Satıcının ilgiside gayet iyiydi.Çok teşekkürler.",
                            CreatedDate = new DateTime(2021, 10, 4, 20, 47, 43, 409, DateTimeKind.Local).AddTicks(2031),
                            CreatedUserId = new Guid("88fe5ec9-7b96-4a90-be4d-06a69d95ef42"),
                            ProductId = new Guid("8bc31d49-d44c-43e7-bc87-f9bdd3b37f78"),
                            Rate = "5",
                            Status = 0,
                            ThumbDown = 4,
                            ThumbsUp = 6
                        });
                });

            modelBuilder.Entity("CommercialSite.Model.Entities.ProductDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedIp")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductCommentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductImageId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductPropertyId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ShippingSettingId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedIp")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("UpdatedUserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ProductCommentId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductImageId");

                    b.HasIndex("ProductPropertyId");

                    b.HasIndex("ShippingSettingId");

                    b.HasIndex("UpdatedUserId");

                    b.ToTable("ProductDetails");
                });

            modelBuilder.Entity("CommercialSite.Model.Entities.ProductImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedIp")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedIp")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("UpdatedUserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UpdatedUserId");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("CommercialSite.Model.Entities.ProductProperty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedIp")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedIp")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("UpdatedUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("VarKey")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("VarValue")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UpdatedUserId");

                    b.ToTable("ProductProperties");
                });

            modelBuilder.Entity("CommercialSite.Model.Entities.ShippingSetting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedIp")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsShippingFree")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedIp")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("UpdatedUserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UpdatedUserId");

                    b.ToTable("ShippingSettings");
                });

            modelBuilder.Entity("CommercialSite.Model.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedIp")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("character varying(30)")
                        .HasMaxLength(30);

                    b.Property<string>("LastIPAddress")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("character varying(12)")
                        .HasMaxLength(12);

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedIp")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("UpdatedUserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("UpdatedUserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6f819539-53c3-4d13-8a34-3b0c911fb515"),
                            AvatarUrl = "/",
                            Email = "admin@admin.com",
                            FirstName = "Admin",
                            LastIPAddress = "127.0.0.1",
                            LastLogin = new DateTime(2021, 10, 4, 20, 47, 43, 400, DateTimeKind.Local).AddTicks(7412),
                            LastName = "Admin",
                            Password = "123",
                            Status = 1,
                            Title = "admin"
                        });
                });

            modelBuilder.Entity("CommercialSite.Model.Entities.UserDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("timestamp without time zone")
                        .HasMaxLength(11);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedIp")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uuid");

                    b.Property<int?>("Gender")
                        .HasColumnType("integer");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("character varying(11)")
                        .HasMaxLength(11);

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TCKN")
                        .HasColumnType("character varying(11)")
                        .HasMaxLength(11);

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedIp")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("UpdatedUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("UpdatedUserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserDetails");
                });

            modelBuilder.Entity("CommercialSite.Model.Entities.Brand", b =>
                {
                    b.HasOne("CommercialSite.Model.Entities.User", "CreatedUserBrand")
                        .WithMany("CreatedUserBrands")
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("CommercialSite.Model.Entities.User", "UpdatedUserBrand")
                        .WithMany("UpdatedUserBrands")
                        .HasForeignKey("UpdatedUserId");
                });

            modelBuilder.Entity("CommercialSite.Model.Entities.Category", b =>
                {
                    b.HasOne("CommercialSite.Model.Entities.User", "CreatedUserCategory")
                        .WithMany("CreatedUserCategories")
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("CommercialSite.Model.Entities.User", "UpdatedUserCategory")
                        .WithMany("UpdatedUserCategories")
                        .HasForeignKey("UpdatedUserId");
                });

            modelBuilder.Entity("CommercialSite.Model.Entities.CommentReaction", b =>
                {
                    b.HasOne("CommercialSite.Model.Entities.User", "CreatedUserCommentReaction")
                        .WithMany("CreatedUserCommentReactions")
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("CommercialSite.Model.Entities.ProductComment", "Comment")
                        .WithMany("CommentReactions")
                        .HasForeignKey("ProductCommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommercialSite.Model.Entities.User", "UpdatedUserCommentReaction")
                        .WithMany("UpdatedUserCommentReactions")
                        .HasForeignKey("UpdatedUserId");
                });

            modelBuilder.Entity("CommercialSite.Model.Entities.Product", b =>
                {
                    b.HasOne("CommercialSite.Model.Entities.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommercialSite.Model.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommercialSite.Model.Entities.User", "CreatedUserProduct")
                        .WithMany("CreatedUserProducts")
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("CommercialSite.Model.Entities.User", "UpdatedUserProduct")
                        .WithMany("UpdatedUserProducts")
                        .HasForeignKey("UpdatedUserId");
                });

            modelBuilder.Entity("CommercialSite.Model.Entities.ProductComment", b =>
                {
                    b.HasOne("CommercialSite.Model.Entities.User", "CreatedUserProductComment")
                        .WithMany("CreatedUserProductComments")
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("CommercialSite.Model.Entities.Product", "Product")
                        .WithMany("ProductComments")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommercialSite.Model.Entities.User", "UpdatedUserProductComment")
                        .WithMany("UpdatedUserProductComments")
                        .HasForeignKey("UpdatedUserId");
                });

            modelBuilder.Entity("CommercialSite.Model.Entities.ProductDetail", b =>
                {
                    b.HasOne("CommercialSite.Model.Entities.User", "CreatedUserProductDetail")
                        .WithMany("CreatedUserProductDetails")
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("CommercialSite.Model.Entities.ProductComment", "ProductComment")
                        .WithMany("ProductDetails")
                        .HasForeignKey("ProductCommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommercialSite.Model.Entities.Product", "Product")
                        .WithMany("ProductDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommercialSite.Model.Entities.ProductImage", "ProductImage")
                        .WithMany("ProductDetails")
                        .HasForeignKey("ProductImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommercialSite.Model.Entities.ProductProperty", "ProductProperty")
                        .WithMany("ProductDetails")
                        .HasForeignKey("ProductPropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommercialSite.Model.Entities.ShippingSetting", "ShippingSetting")
                        .WithMany("ProductDetails")
                        .HasForeignKey("ShippingSettingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommercialSite.Model.Entities.User", "UpdatedUserProductDetail")
                        .WithMany("UpdatedUserProductDetails")
                        .HasForeignKey("UpdatedUserId");
                });

            modelBuilder.Entity("CommercialSite.Model.Entities.ProductImage", b =>
                {
                    b.HasOne("CommercialSite.Model.Entities.User", "CreatedUserProductImage")
                        .WithMany("CreatedUserProductImages")
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("CommercialSite.Model.Entities.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommercialSite.Model.Entities.User", "UpdatedUserProductImage")
                        .WithMany("UpdatedUserProductImages")
                        .HasForeignKey("UpdatedUserId");
                });

            modelBuilder.Entity("CommercialSite.Model.Entities.ProductProperty", b =>
                {
                    b.HasOne("CommercialSite.Model.Entities.User", "CreatedUserProductProperty")
                        .WithMany("CreatedUserProductProperties")
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("CommercialSite.Model.Entities.Product", "Product")
                        .WithMany("ProductProperties")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommercialSite.Model.Entities.User", "UpdatedUserProductProperty")
                        .WithMany("UpdatedUserProductProperties")
                        .HasForeignKey("UpdatedUserId");
                });

            modelBuilder.Entity("CommercialSite.Model.Entities.ShippingSetting", b =>
                {
                    b.HasOne("CommercialSite.Model.Entities.User", "CreatedUserShippingSetting")
                        .WithMany("CreatedUserShippingSettings")
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("CommercialSite.Model.Entities.Product", "Product")
                        .WithMany("ShippingSettings")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommercialSite.Model.Entities.User", "UpdatedUserShippingSetting")
                        .WithMany("UpdatedUserShippingSettings")
                        .HasForeignKey("UpdatedUserId");
                });

            modelBuilder.Entity("CommercialSite.Model.Entities.User", b =>
                {
                    b.HasOne("CommercialSite.Model.Entities.User", "CreatedUser")
                        .WithMany("CreatedUsers")
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("CommercialSite.Model.Entities.User", "UpdatedUser")
                        .WithMany("UpdatedUsers")
                        .HasForeignKey("UpdatedUserId");
                });

            modelBuilder.Entity("CommercialSite.Model.Entities.UserDetail", b =>
                {
                    b.HasOne("CommercialSite.Model.Entities.User", "CreatedUserDetail")
                        .WithMany("CreatedUserDetails")
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("CommercialSite.Model.Entities.User", "UpdatedUserDetail")
                        .WithMany("UpdatedUserDetails")
                        .HasForeignKey("UpdatedUserId");

                    b.HasOne("CommercialSite.Model.Entities.User", "User")
                        .WithMany("UserDetails")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
