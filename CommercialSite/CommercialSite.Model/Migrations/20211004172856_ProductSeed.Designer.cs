// <auto-generated />
using System;
using CommercialSite.Model.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace CommercialSite.Model.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20211004172856_ProductSeed")]
    partial class ProductSeed
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("CommercialSite.Model.Entities.Brand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedIp")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedIp")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("UpdatedUserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("UpdatedUserId");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5270dece-d120-4001-8270-74468f9f5137"),
                            BrandName = "ACER",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("38365c37-f897-46b9-9350-04910a632300"),
                            BrandName = "Lenovo",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("d7496852-ffbb-4e25-b1fc-b3be13b13b8b"),
                            BrandName = "Samsung",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("f57c1897-7f8a-44ef-a1bc-12703143fae0"),
                            BrandName = "Apple",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("d79a0f0b-de0a-4664-9ea4-1cae382d8121"),
                            BrandName = "Xiaomi",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("6c84ddc2-b911-49b1-8439-384fd38fcaa5"),
                            BrandName = "Oppo",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("983615ab-1632-40e2-9147-16cc8c285861"),
                            BrandName = "Philips",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("208d3168-c67c-44ee-a2c2-e330df173392"),
                            BrandName = "LG",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("96c343a3-6767-4125-8e40-1cb0056143ff"),
                            BrandName = "Reeder",
                            Status = 1
                        });
                });

            modelBuilder.Entity("CommercialSite.Model.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedIp")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedIp")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("UpdatedUserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("UpdatedUserId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("25b1073b-33e1-4c54-a771-b8c91908c276"),
                            CategoryName = "Bilgisayar",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("deb09235-b63c-48f5-b50c-2fc312c87569"),
                            CategoryName = "Telefon",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("1584c4bc-81b7-4e67-bfd5-82a798f814c5"),
                            CategoryName = "Tablet",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("26336fc3-1e37-4242-b909-30f01a716214"),
                            CategoryName = "Televizyon",
                            Status = 1
                        });
                });

            modelBuilder.Entity("CommercialSite.Model.Entities.CommentReaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedIp")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductCommentId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedIp")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("UpdatedUserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ProductCommentId");

                    b.HasIndex("UpdatedUserId");

                    b.ToTable("CommentReactions");
                });

            modelBuilder.Entity("CommercialSite.Model.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BrandId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedIp")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<double?>("DiscountPrice")
                        .HasColumnType("double precision");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<int?>("Rate")
                        .HasColumnType("integer");

                    b.Property<int?>("ReviewNumber")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedIp")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("UpdatedUserId")
                        .HasColumnType("uuid");

                    b.Property<double>("WithoutDiscountPrice")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("UpdatedUserId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cf64d3ff-a595-4f9e-a4d6-11ebc21905aa"),
                            BrandId = new Guid("2cb8bfab-ff82-41bd-bf39-84d3e5b6ef89"),
                            CategoryId = new Guid("9361933a-b73c-4d1d-9dd1-ecfc816b3e6d"),
                            DiscountPrice = 12.199,
                            ProductName = "Acer Nitro 5 Intel Core i7 10750H",
                            Rate = 4,
                            ReviewNumber = 0,
                            Status = 0,
                            WithoutDiscountPrice = 14.999000000000001
                        },
                        new
                        {
                            Id = new Guid("c15eb71a-0120-434c-bbad-8011d796b392"),
                            BrandId = new Guid("2cb8bfab-ff82-41bd-bf39-84d3e5b6ef89"),
                            CategoryId = new Guid("9361933a-b73c-4d1d-9dd1-ecfc816b3e6d"),
                            DiscountPrice = 17.998999999999999,
                            ProductName = "Acer Predator Triton 500 Intel Core i7 10750H",
                            Rate = 5,
                            ReviewNumber = 0,
                            Status = 0,
                            WithoutDiscountPrice = 23.959
                        },
                        new
                        {
                            Id = new Guid("2322717a-d36d-4299-af9f-2b6faedd1423"),
                            BrandId = new Guid("af6273bb-dc30-4a61-9aeb-8225636f564a"),
                            CategoryId = new Guid("9361933a-b73c-4d1d-9dd1-ecfc816b3e6d"),
                            DiscountPrice = 7.5990000000000002,
                            ProductName = "Lenovo IdeaPad Gaming 3 AMD Ryzen 5 4600H",
                            Rate = 3,
                            ReviewNumber = 0,
                            Status = 0,
                            WithoutDiscountPrice = 11.109
                        },
                        new
                        {
                            Id = new Guid("05e3d510-6866-47b9-ad75-3cf2fd330c9c"),
                            BrandId = new Guid("076bff1f-6c72-4eca-9bf9-1fe491a108b4"),
                            CategoryId = new Guid("8d0de41d-191a-469f-8909-61c169df2d8e"),
                            DiscountPrice = 4.899,
                            ProductName = "Samsung Galaxy Tab S7 SM-T870 128 GB Tablet",
                            Rate = 4,
                            ReviewNumber = 0,
                            Status = 0,
                            WithoutDiscountPrice = 5.7990000000000004
                        },
                        new
                        {
                            Id = new Guid("b9b5381c-de81-4953-a7ee-9a782b9652da"),
                            BrandId = new Guid("af6273bb-dc30-4a61-9aeb-8225636f564a"),
                            CategoryId = new Guid("8d0de41d-191a-469f-8909-61c169df2d8e"),
                            DiscountPrice = 1.829,
                            ProductName = "Lenovo TAB M10 TB-X606F 64GB 10.3 Wi Fi Tablet Gri ZA5T0215TR",
                            Rate = 4,
                            ReviewNumber = 0,
                            Status = 0,
                            WithoutDiscountPrice = 2.9990000000000001
                        },
                        new
                        {
                            Id = new Guid("a7630777-3514-46e6-8f46-ff84d48a32a8"),
                            BrandId = new Guid("e49c6a75-5835-471e-918a-3345bbb26809"),
                            CategoryId = new Guid("8d0de41d-191a-469f-8909-61c169df2d8e"),
                            DiscountPrice = 1.399,
                            ProductName = "Reeder M10 Blue Max 64GB 4G LTE",
                            Rate = 4,
                            ReviewNumber = 0,
                            Status = 0,
                            WithoutDiscountPrice = 2.2989999999999999
                        },
                        new
                        {
                            Id = new Guid("44926cd7-1678-4808-a2b0-df95c6f865fc"),
                            BrandId = new Guid("1a7c509d-42e2-4213-a944-212f07222084"),
                            CategoryId = new Guid("21f8242e-dd3a-4280-85ad-3bce8bbe4c8c"),
                            DiscountPrice = 4.399,
                            ProductName = "LG 43UN71006LB 43 Inç 108 Ekran Uydu Alıcılı 4K Ultra HD Smart LED TV",
                            Rate = 4,
                            ReviewNumber = 0,
                            Status = 0,
                            WithoutDiscountPrice = 5.9989999999999997
                        },
                        new
                        {
                            Id = new Guid("a4518427-e6f0-46bd-bbbd-4dcdaa92966e"),
                            BrandId = new Guid("6520d7be-be4d-4b0d-a222-7e3d90c42de1"),
                            CategoryId = new Guid("21f8242e-dd3a-4280-85ad-3bce8bbe4c8c"),
                            DiscountPrice = 5.1989999999999998,
                            ProductName = "Philips 50PUS7805 50 Inç 126 Ekran Uydu Alıcılı 4K Ultra HD LED Smart TV",
                            Rate = 4,
                            ReviewNumber = 0,
                            Status = 0,
                            WithoutDiscountPrice = 8.1989999999999998
                        },
                        new
                        {
                            Id = new Guid("ebf25e2d-15e5-4133-ad82-156f83f4ce96"),
                            BrandId = new Guid("e49c6a75-5835-471e-918a-3345bbb26809"),
                            CategoryId = new Guid("afa8a153-6eed-4ad2-a453-dc6d2f86caab"),
                            DiscountPrice = 1.5489999999999999,
                            ProductName = "Reeder P13 Blue Max 64 GB (Reeder Türkiye Garantili)",
                            Rate = 3,
                            ReviewNumber = 0,
                            Status = 0,
                            WithoutDiscountPrice = 2.0489999999999999
                        },
                        new
                        {
                            Id = new Guid("49669332-44e1-4696-84c0-9ab229061315"),
                            BrandId = new Guid("14534656-c0d2-44cf-922c-6fc83a21c203"),
                            CategoryId = new Guid("afa8a153-6eed-4ad2-a453-dc6d2f86caab"),
                            DiscountPrice = 3.3180000000000001,
                            ProductName = "Oppo Reno 4 Lite 128 GB (Oppo Türkiye Garantili)",
                            Rate = 4,
                            ReviewNumber = 0,
                            Status = 0,
                            WithoutDiscountPrice = 3.5990000000000002
                        },
                        new
                        {
                            Id = new Guid("67614fef-8f67-4ba5-af0d-f35479d003f2"),
                            BrandId = new Guid("ad3869c4-0631-4d56-8fc3-12b9afd7d40a"),
                            CategoryId = new Guid("afa8a153-6eed-4ad2-a453-dc6d2f86caab"),
                            DiscountPrice = 4.2990000000000004,
                            ProductName = "Xiaomi Redmi Note 10 Pro 128 GB 8 GB RAM (Xiaomi Türkiye Garantili)",
                            Rate = 4,
                            ReviewNumber = 0,
                            Status = 0,
                            WithoutDiscountPrice = 3.7989999999999999
                        },
                        new
                        {
                            Id = new Guid("e55ae9f3-888d-4c69-a0e7-4403a8292d95"),
                            BrandId = new Guid("076bff1f-6c72-4eca-9bf9-1fe491a108b4"),
                            CategoryId = new Guid("afa8a153-6eed-4ad2-a453-dc6d2f86caab"),
                            DiscountPrice = 11.249000000000001,
                            ProductName = "Samsung Galaxy Note 20 Ultra 256 GB (Samsung Türkiye Garantili)",
                            Rate = 4,
                            ReviewNumber = 0,
                            Status = 0,
                            WithoutDiscountPrice = 12.298999999999999
                        },
                        new
                        {
                            Id = new Guid("8bc31d49-d44c-43e7-bc87-f9bdd3b37f78"),
                            BrandId = new Guid("877bdb84-f2f3-4143-aae4-b1a5e6103781"),
                            CategoryId = new Guid("afa8a153-6eed-4ad2-a453-dc6d2f86caab"),
                            DiscountPrice = 13.999000000000001,
                            ProductName = "iPhone XS Max 256 GB",
                            Rate = 4,
                            ReviewNumber = 0,
                            Status = 0,
                            WithoutDiscountPrice = 14.999000000000001
                        });
                });

            modelBuilder.Entity("CommercialSite.Model.Entities.ProductComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedIp")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<string>("Rate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int?>("ThumbDown")
                        .HasColumnType("integer");

                    b.Property<int?>("ThumbsUp")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedIp")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("UpdatedUserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UpdatedUserId");

                    b.ToTable("ProductComments");
                });

            modelBuilder.Entity("CommercialSite.Model.Entities.ProductDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedIp")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductCommentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductImageId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductPropertyId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ShippingSettingId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedIp")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("UpdatedUserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ProductCommentId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductImageId");

                    b.HasIndex("ProductPropertyId");

                    b.HasIndex("ShippingSettingId");

                    b.HasIndex("UpdatedUserId");

                    b.ToTable("ProductDetails");
                });

            modelBuilder.Entity("CommercialSite.Model.Entities.ProductImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedIp")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedIp")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("UpdatedUserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UpdatedUserId");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("CommercialSite.Model.Entities.ProductProperty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedIp")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedIp")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("UpdatedUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("VarKey")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("VarValue")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UpdatedUserId");

                    b.ToTable("ProductProperties");
                });

            modelBuilder.Entity("CommercialSite.Model.Entities.ShippingSetting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedIp")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsShippingFree")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedIp")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("UpdatedUserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UpdatedUserId");

                    b.ToTable("ShippingSettings");
                });

            modelBuilder.Entity("CommercialSite.Model.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedIp")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("character varying(30)")
                        .HasMaxLength(30);

                    b.Property<string>("LastIPAddress")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("character varying(12)")
                        .HasMaxLength(12);

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedIp")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("UpdatedUserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("UpdatedUserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("aecd37ab-99c0-4067-875e-b1f1d1672d77"),
                            AvatarUrl = "/",
                            Email = "admin@admin.com",
                            FirstName = "Admin",
                            LastIPAddress = "127.0.0.1",
                            LastLogin = new DateTime(2021, 10, 4, 20, 28, 56, 102, DateTimeKind.Local).AddTicks(7423),
                            LastName = "Admin",
                            Password = "123",
                            Status = 1,
                            Title = "admin"
                        });
                });

            modelBuilder.Entity("CommercialSite.Model.Entities.UserDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("timestamp without time zone")
                        .HasMaxLength(11);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedIp")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uuid");

                    b.Property<int?>("Gender")
                        .HasColumnType("integer");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("character varying(11)")
                        .HasMaxLength(11);

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TCKN")
                        .HasColumnType("character varying(11)")
                        .HasMaxLength(11);

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedIp")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<Guid?>("UpdatedUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("UpdatedUserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserDetails");
                });

            modelBuilder.Entity("CommercialSite.Model.Entities.Brand", b =>
                {
                    b.HasOne("CommercialSite.Model.Entities.User", "CreatedUserBrand")
                        .WithMany("CreatedUserBrands")
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("CommercialSite.Model.Entities.User", "UpdatedUserBrand")
                        .WithMany("UpdatedUserBrands")
                        .HasForeignKey("UpdatedUserId");
                });

            modelBuilder.Entity("CommercialSite.Model.Entities.Category", b =>
                {
                    b.HasOne("CommercialSite.Model.Entities.User", "CreatedUserCategory")
                        .WithMany("CreatedUserCategories")
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("CommercialSite.Model.Entities.User", "UpdatedUserCategory")
                        .WithMany("UpdatedUserCategories")
                        .HasForeignKey("UpdatedUserId");
                });

            modelBuilder.Entity("CommercialSite.Model.Entities.CommentReaction", b =>
                {
                    b.HasOne("CommercialSite.Model.Entities.User", "CreatedUserCommentReaction")
                        .WithMany("CreatedUserCommentReactions")
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("CommercialSite.Model.Entities.ProductComment", "Comment")
                        .WithMany("CommentReactions")
                        .HasForeignKey("ProductCommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommercialSite.Model.Entities.User", "UpdatedUserCommentReaction")
                        .WithMany("UpdatedUserCommentReactions")
                        .HasForeignKey("UpdatedUserId");
                });

            modelBuilder.Entity("CommercialSite.Model.Entities.Product", b =>
                {
                    b.HasOne("CommercialSite.Model.Entities.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommercialSite.Model.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommercialSite.Model.Entities.User", "CreatedUserProduct")
                        .WithMany("CreatedUserProducts")
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("CommercialSite.Model.Entities.User", "UpdatedUserProduct")
                        .WithMany("UpdatedUserProducts")
                        .HasForeignKey("UpdatedUserId");
                });

            modelBuilder.Entity("CommercialSite.Model.Entities.ProductComment", b =>
                {
                    b.HasOne("CommercialSite.Model.Entities.User", "CreatedUserProductComment")
                        .WithMany("CreatedUserProductComments")
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("CommercialSite.Model.Entities.Product", "Product")
                        .WithMany("ProductComments")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommercialSite.Model.Entities.User", "UpdatedUserProductComment")
                        .WithMany("UpdatedUserProductComments")
                        .HasForeignKey("UpdatedUserId");
                });

            modelBuilder.Entity("CommercialSite.Model.Entities.ProductDetail", b =>
                {
                    b.HasOne("CommercialSite.Model.Entities.User", "CreatedUserProductDetail")
                        .WithMany("CreatedUserProductDetails")
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("CommercialSite.Model.Entities.ProductComment", "ProductComment")
                        .WithMany("ProductDetails")
                        .HasForeignKey("ProductCommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommercialSite.Model.Entities.Product", "Product")
                        .WithMany("ProductDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommercialSite.Model.Entities.ProductImage", "ProductImage")
                        .WithMany("ProductDetails")
                        .HasForeignKey("ProductImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommercialSite.Model.Entities.ProductProperty", "ProductProperty")
                        .WithMany("ProductDetails")
                        .HasForeignKey("ProductPropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommercialSite.Model.Entities.ShippingSetting", "ShippingSetting")
                        .WithMany("ProductDetails")
                        .HasForeignKey("ShippingSettingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommercialSite.Model.Entities.User", "UpdatedUserProductDetail")
                        .WithMany("UpdatedUserProductDetails")
                        .HasForeignKey("UpdatedUserId");
                });

            modelBuilder.Entity("CommercialSite.Model.Entities.ProductImage", b =>
                {
                    b.HasOne("CommercialSite.Model.Entities.User", "CreatedUserProductImage")
                        .WithMany("CreatedUserProductImages")
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("CommercialSite.Model.Entities.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommercialSite.Model.Entities.User", "UpdatedUserProductImage")
                        .WithMany("UpdatedUserProductImages")
                        .HasForeignKey("UpdatedUserId");
                });

            modelBuilder.Entity("CommercialSite.Model.Entities.ProductProperty", b =>
                {
                    b.HasOne("CommercialSite.Model.Entities.User", "CreatedUserProductProperty")
                        .WithMany("CreatedUserProductProperties")
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("CommercialSite.Model.Entities.Product", "Product")
                        .WithMany("ProductProperties")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommercialSite.Model.Entities.User", "UpdatedUserProductProperty")
                        .WithMany("UpdatedUserProductProperties")
                        .HasForeignKey("UpdatedUserId");
                });

            modelBuilder.Entity("CommercialSite.Model.Entities.ShippingSetting", b =>
                {
                    b.HasOne("CommercialSite.Model.Entities.User", "CreatedUserShippingSetting")
                        .WithMany("CreatedUserShippingSettings")
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("CommercialSite.Model.Entities.Product", "Product")
                        .WithMany("ShippingSettings")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommercialSite.Model.Entities.User", "UpdatedUserShippingSetting")
                        .WithMany("UpdatedUserShippingSettings")
                        .HasForeignKey("UpdatedUserId");
                });

            modelBuilder.Entity("CommercialSite.Model.Entities.User", b =>
                {
                    b.HasOne("CommercialSite.Model.Entities.User", "CreatedUser")
                        .WithMany("CreatedUsers")
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("CommercialSite.Model.Entities.User", "UpdatedUser")
                        .WithMany("UpdatedUsers")
                        .HasForeignKey("UpdatedUserId");
                });

            modelBuilder.Entity("CommercialSite.Model.Entities.UserDetail", b =>
                {
                    b.HasOne("CommercialSite.Model.Entities.User", "CreatedUserDetail")
                        .WithMany("CreatedUserDetails")
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("CommercialSite.Model.Entities.User", "UpdatedUserDetail")
                        .WithMany("UpdatedUserDetails")
                        .HasForeignKey("UpdatedUserId");

                    b.HasOne("CommercialSite.Model.Entities.User", "User")
                        .WithMany("UserDetails")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
