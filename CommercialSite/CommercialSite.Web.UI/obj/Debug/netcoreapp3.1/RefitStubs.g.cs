// <auto-generated />
using System;
using System.Net.Http;
using System.Collections.Generic;
using CommercialSite.Web.UI.RefitInternalGenerated;

/* ******** Hey You! *********
 *
 * This is a generated file, and gets rewritten every time you build the
 * project. If you want to edit it, you need to edit the mustache template
 * in the Refit package */

#pragma warning disable
namespace CommercialSite.Web.UI.RefitInternalGenerated
{
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [AttributeUsage (AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Enum | AttributeTargets.Constructor | AttributeTargets.Method | AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Event | AttributeTargets.Interface | AttributeTargets.Delegate)]
    sealed class PreserveAttribute : Attribute
    {

        //
        // Fields
        //
        public bool AllMembers;

        public bool Conditional;
    }
}
#pragma warning restore

#pragma warning disable CS8632 // The annotation for nullable reference types should only be used in code within a '#nullable' annotations context.
#pragma warning disable CS8669 // The annotation for nullable reference types should only be used in code within a '#nullable' annotations context. Auto-generated code requires an explicit '#nullable' directive in source.
namespace CommercialSite.Web.UI.APIs
{
    using global::CommercialSite.Common.DTOs.Login;
    using global::CommercialSite.Common.DTOs.User;
    using global::CommercialSite.Common.Models;
    using global::Refit;
    using global::System.Threading.Tasks;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIAccountApi : IAccountApi
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIAccountApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<UserResponse>>> IAccountApi.Login(LoginRequest request)
        {
            var arguments = new object[] { request };
            var func = requestBuilder.BuildRestResultFuncForMethod("Login", new Type[] { typeof(LoginRequest) });
            return (Task<ApiResponse<WebApiResponse<UserResponse>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<GetAccessToken>>> IAccountApi.RefreshToken(RefreshToken request)
        {
            var arguments = new object[] { request };
            var func = requestBuilder.BuildRestResultFuncForMethod("RefreshToken", new Type[] { typeof(RefreshToken) });
            return (Task<ApiResponse<WebApiResponse<GetAccessToken>>>)func(Client, arguments);
        }
    }
}

namespace CommercialSite.Web.UI.APIs
{
    using global::CommercialSite.Common.DTOs.BillingAddress;
    using global::CommercialSite.Common.Models;
    using global::Microsoft.AspNetCore.Mvc;
    using global::Refit;
    using global::System;
    using global::System.Collections.Generic;
    using global::System.Linq;
    using global::System.Threading.Tasks;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIBillingAddressApi : IBillingAddressApi
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIBillingAddressApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<List<BillingAddressResponse>>>> IBillingAddressApi.List()
        {
            var arguments = new object[] {  };
            var func = requestBuilder.BuildRestResultFuncForMethod("List", new Type[] {  });
            return (Task<ApiResponse<WebApiResponse<List<BillingAddressResponse>>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<BillingAddressResponse>>> IBillingAddressApi.Get(Guid id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", new Type[] { typeof(Guid) });
            return (Task<ApiResponse<WebApiResponse<BillingAddressResponse>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<BillingAddressResponse>>> IBillingAddressApi.Post(BillingAddressRequest request)
        {
            var arguments = new object[] { request };
            var func = requestBuilder.BuildRestResultFuncForMethod("Post", new Type[] { typeof(BillingAddressRequest) });
            return (Task<ApiResponse<WebApiResponse<BillingAddressResponse>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<BillingAddressResponse>>> IBillingAddressApi.Put(Guid id, BillingAddressRequest request)
        {
            var arguments = new object[] { id, request };
            var func = requestBuilder.BuildRestResultFuncForMethod("Put", new Type[] { typeof(Guid), typeof(BillingAddressRequest) });
            return (Task<ApiResponse<WebApiResponse<BillingAddressResponse>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<BillingAddressResponse>>> IBillingAddressApi.Delete(Guid id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("Delete", new Type[] { typeof(Guid) });
            return (Task<ApiResponse<WebApiResponse<BillingAddressResponse>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<bool>>> IBillingAddressApi.Activate(Guid id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("Activate", new Type[] { typeof(Guid) });
            return (Task<ApiResponse<WebApiResponse<bool>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<List<BillingAddressResponse>>>> IBillingAddressApi.GetActive()
        {
            var arguments = new object[] {  };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetActive", new Type[] {  });
            return (Task<ApiResponse<WebApiResponse<List<BillingAddressResponse>>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<List<BillingAddressResponse>>>> IBillingAddressApi.GetByUserId(Guid id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetByUserId", new Type[] { typeof(Guid) });
            return (Task<ApiResponse<WebApiResponse<List<BillingAddressResponse>>>>)func(Client, arguments);
        }
    }
}

namespace CommercialSite.Web.UI.APIs
{
    using global::CommercialSite.Common.DTOs.Brand;
    using global::CommercialSite.Common.Models;
    using global::Microsoft.AspNetCore.Mvc;
    using global::Refit;
    using global::System;
    using global::System.Collections.Generic;
    using global::System.Linq;
    using global::System.Threading.Tasks;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIBrandApi : IBrandApi
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIBrandApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<List<BrandResponse>>>> IBrandApi.List()
        {
            var arguments = new object[] {  };
            var func = requestBuilder.BuildRestResultFuncForMethod("List", new Type[] {  });
            return (Task<ApiResponse<WebApiResponse<List<BrandResponse>>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<BrandResponse>>> IBrandApi.Get(Guid id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", new Type[] { typeof(Guid) });
            return (Task<ApiResponse<WebApiResponse<BrandResponse>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<BrandResponse>>> IBrandApi.Post(BrandRequest request)
        {
            var arguments = new object[] { request };
            var func = requestBuilder.BuildRestResultFuncForMethod("Post", new Type[] { typeof(BrandRequest) });
            return (Task<ApiResponse<WebApiResponse<BrandResponse>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<BrandResponse>>> IBrandApi.Put(Guid id, BrandRequest request)
        {
            var arguments = new object[] { id, request };
            var func = requestBuilder.BuildRestResultFuncForMethod("Put", new Type[] { typeof(Guid), typeof(BrandRequest) });
            return (Task<ApiResponse<WebApiResponse<BrandResponse>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<BrandResponse>>> IBrandApi.Delete(Guid id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("Delete", new Type[] { typeof(Guid) });
            return (Task<ApiResponse<WebApiResponse<BrandResponse>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<bool>>> IBrandApi.Activate(Guid id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("Activate", new Type[] { typeof(Guid) });
            return (Task<ApiResponse<WebApiResponse<bool>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<List<BrandResponse>>>> IBrandApi.GetActive()
        {
            var arguments = new object[] {  };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetActive", new Type[] {  });
            return (Task<ApiResponse<WebApiResponse<List<BrandResponse>>>>)func(Client, arguments);
        }
    }
}

namespace CommercialSite.Web.UI.APIs
{
    using global::CommercialSite.Common.DTOs.Category;
    using global::CommercialSite.Common.Models;
    using global::Microsoft.AspNetCore.Mvc;
    using global::Refit;
    using global::System;
    using global::System.Collections.Generic;
    using global::System.Threading.Tasks;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedICategoryApi : ICategoryApi
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedICategoryApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<List<CategoryResponse>>>> ICategoryApi.List()
        {
            var arguments = new object[] {  };
            var func = requestBuilder.BuildRestResultFuncForMethod("List", new Type[] {  });
            return (Task<ApiResponse<WebApiResponse<List<CategoryResponse>>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<CategoryResponse>>> ICategoryApi.Get(Guid id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", new Type[] { typeof(Guid) });
            return (Task<ApiResponse<WebApiResponse<CategoryResponse>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<CategoryResponse>>> ICategoryApi.Post(CategoryRequest request)
        {
            var arguments = new object[] { request };
            var func = requestBuilder.BuildRestResultFuncForMethod("Post", new Type[] { typeof(CategoryRequest) });
            return (Task<ApiResponse<WebApiResponse<CategoryResponse>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<CategoryResponse>>> ICategoryApi.Put(Guid id, CategoryRequest request)
        {
            var arguments = new object[] { id, request };
            var func = requestBuilder.BuildRestResultFuncForMethod("Put", new Type[] { typeof(Guid), typeof(CategoryRequest) });
            return (Task<ApiResponse<WebApiResponse<CategoryResponse>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<CategoryResponse>>> ICategoryApi.Delete(Guid id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("Delete", new Type[] { typeof(Guid) });
            return (Task<ApiResponse<WebApiResponse<CategoryResponse>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<bool>>> ICategoryApi.Activate(Guid id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("Activate", new Type[] { typeof(Guid) });
            return (Task<ApiResponse<WebApiResponse<bool>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<List<CategoryResponse>>>> ICategoryApi.GetActive()
        {
            var arguments = new object[] {  };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetActive", new Type[] {  });
            return (Task<ApiResponse<WebApiResponse<List<CategoryResponse>>>>)func(Client, arguments);
        }
    }
}

namespace CommercialSite.Web.UI.APIs
{
    using global::CommercialSite.Common.DTOs.CommentReaction;
    using global::CommercialSite.Common.Models;
    using global::Microsoft.AspNetCore.Mvc;
    using global::Refit;
    using global::System;
    using global::System.Collections.Generic;
    using global::System.Threading.Tasks;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedICommentReactionApi : ICommentReactionApi
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedICommentReactionApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<List<CommentReactionResponse>>>> ICommentReactionApi.List()
        {
            var arguments = new object[] {  };
            var func = requestBuilder.BuildRestResultFuncForMethod("List", new Type[] {  });
            return (Task<ApiResponse<WebApiResponse<List<CommentReactionResponse>>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<CommentReactionResponse>>> ICommentReactionApi.Get(Guid id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", new Type[] { typeof(Guid) });
            return (Task<ApiResponse<WebApiResponse<CommentReactionResponse>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<CommentReactionResponse>>> ICommentReactionApi.Post(CommentReactionRequest request)
        {
            var arguments = new object[] { request };
            var func = requestBuilder.BuildRestResultFuncForMethod("Post", new Type[] { typeof(CommentReactionRequest) });
            return (Task<ApiResponse<WebApiResponse<CommentReactionResponse>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<CommentReactionResponse>>> ICommentReactionApi.Put(Guid id, CommentReactionRequest request)
        {
            var arguments = new object[] { id, request };
            var func = requestBuilder.BuildRestResultFuncForMethod("Put", new Type[] { typeof(Guid), typeof(CommentReactionRequest) });
            return (Task<ApiResponse<WebApiResponse<CommentReactionResponse>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<CommentReactionResponse>>> ICommentReactionApi.Delete(Guid id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("Delete", new Type[] { typeof(Guid) });
            return (Task<ApiResponse<WebApiResponse<CommentReactionResponse>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<bool>>> ICommentReactionApi.Activate(Guid id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("Activate", new Type[] { typeof(Guid) });
            return (Task<ApiResponse<WebApiResponse<bool>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<List<CommentReactionResponse>>>> ICommentReactionApi.GetActive()
        {
            var arguments = new object[] {  };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetActive", new Type[] {  });
            return (Task<ApiResponse<WebApiResponse<List<CommentReactionResponse>>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<List<CommentReactionResponse>>>> ICommentReactionApi.GetByProductCommentId(Guid id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetByProductCommentId", new Type[] { typeof(Guid) });
            return (Task<ApiResponse<WebApiResponse<List<CommentReactionResponse>>>>)func(Client, arguments);
        }
    }
}

namespace CommercialSite.Web.UI.APIs
{
    using global::CommercialSite.Common.DTOs.FavoriteProduct;
    using global::CommercialSite.Common.Models;
    using global::Microsoft.AspNetCore.Mvc;
    using global::Refit;
    using global::System;
    using global::System.Collections.Generic;
    using global::System.Linq;
    using global::System.Threading.Tasks;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIFavoriteProductApi : IFavoriteProductApi
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIFavoriteProductApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<List<FavoriteProductResponse>>>> IFavoriteProductApi.List()
        {
            var arguments = new object[] {  };
            var func = requestBuilder.BuildRestResultFuncForMethod("List", new Type[] {  });
            return (Task<ApiResponse<WebApiResponse<List<FavoriteProductResponse>>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<FavoriteProductResponse>>> IFavoriteProductApi.Get(Guid id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", new Type[] { typeof(Guid) });
            return (Task<ApiResponse<WebApiResponse<FavoriteProductResponse>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<FavoriteProductResponse>>> IFavoriteProductApi.Post(FavoriteProductRequest request)
        {
            var arguments = new object[] { request };
            var func = requestBuilder.BuildRestResultFuncForMethod("Post", new Type[] { typeof(FavoriteProductRequest) });
            return (Task<ApiResponse<WebApiResponse<FavoriteProductResponse>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<FavoriteProductResponse>>> IFavoriteProductApi.Put(Guid id, FavoriteProductRequest request)
        {
            var arguments = new object[] { id, request };
            var func = requestBuilder.BuildRestResultFuncForMethod("Put", new Type[] { typeof(Guid), typeof(FavoriteProductRequest) });
            return (Task<ApiResponse<WebApiResponse<FavoriteProductResponse>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<FavoriteProductResponse>>> IFavoriteProductApi.Delete(Guid id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("Delete", new Type[] { typeof(Guid) });
            return (Task<ApiResponse<WebApiResponse<FavoriteProductResponse>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<bool>>> IFavoriteProductApi.Activate(Guid id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("Activate", new Type[] { typeof(Guid) });
            return (Task<ApiResponse<WebApiResponse<bool>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<List<FavoriteProductResponse>>>> IFavoriteProductApi.GetActive()
        {
            var arguments = new object[] {  };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetActive", new Type[] {  });
            return (Task<ApiResponse<WebApiResponse<List<FavoriteProductResponse>>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<List<FavoriteProductResponse>>>> IFavoriteProductApi.GetByUserId(Guid id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetByUserId", new Type[] { typeof(Guid) });
            return (Task<ApiResponse<WebApiResponse<List<FavoriteProductResponse>>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<List<FavoriteProductResponse>>>> IFavoriteProductApi.GetByProductId(Guid id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetByProductId", new Type[] { typeof(Guid) });
            return (Task<ApiResponse<WebApiResponse<List<FavoriteProductResponse>>>>)func(Client, arguments);
        }
    }
}

namespace CommercialSite.Web.UI.APIs
{
    using global::CommercialSite.Common.DTOs.Order;
    using global::CommercialSite.Common.Models;
    using global::Microsoft.AspNetCore.Mvc;
    using global::Refit;
    using global::System;
    using global::System.Collections.Generic;
    using global::System.Linq;
    using global::System.Threading.Tasks;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIOrderApi : IOrderApi
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIOrderApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<List<OrderResponse>>>> IOrderApi.List()
        {
            var arguments = new object[] {  };
            var func = requestBuilder.BuildRestResultFuncForMethod("List", new Type[] {  });
            return (Task<ApiResponse<WebApiResponse<List<OrderResponse>>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<OrderResponse>>> IOrderApi.Get(Guid id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", new Type[] { typeof(Guid) });
            return (Task<ApiResponse<WebApiResponse<OrderResponse>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<OrderResponse>>> IOrderApi.Post(OrderRequest request)
        {
            var arguments = new object[] { request };
            var func = requestBuilder.BuildRestResultFuncForMethod("Post", new Type[] { typeof(OrderRequest) });
            return (Task<ApiResponse<WebApiResponse<OrderResponse>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<OrderResponse>>> IOrderApi.Put(Guid id, OrderRequest request)
        {
            var arguments = new object[] { id, request };
            var func = requestBuilder.BuildRestResultFuncForMethod("Put", new Type[] { typeof(Guid), typeof(OrderRequest) });
            return (Task<ApiResponse<WebApiResponse<OrderResponse>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<OrderResponse>>> IOrderApi.Delete(Guid id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("Delete", new Type[] { typeof(Guid) });
            return (Task<ApiResponse<WebApiResponse<OrderResponse>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<bool>>> IOrderApi.Activate(Guid id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("Activate", new Type[] { typeof(Guid) });
            return (Task<ApiResponse<WebApiResponse<bool>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<List<OrderResponse>>>> IOrderApi.GetActive()
        {
            var arguments = new object[] {  };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetActive", new Type[] {  });
            return (Task<ApiResponse<WebApiResponse<List<OrderResponse>>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<List<OrderResponse>>>> IOrderApi.GetByUserId(Guid id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetByUserId", new Type[] { typeof(Guid) });
            return (Task<ApiResponse<WebApiResponse<List<OrderResponse>>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<List<OrderResponse>>>> IOrderApi.GetByProductId(Guid id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetByProductId", new Type[] { typeof(Guid) });
            return (Task<ApiResponse<WebApiResponse<List<OrderResponse>>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<List<OrderResponse>>>> IOrderApi.GetByOrderInfoId(Guid id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetByOrderInfoId", new Type[] { typeof(Guid) });
            return (Task<ApiResponse<WebApiResponse<List<OrderResponse>>>>)func(Client, arguments);
        }
    }
}

namespace CommercialSite.Web.UI.APIs
{
    using global::CommercialSite.Common.DTOs.OrderInfo;
    using global::CommercialSite.Common.Models;
    using global::Microsoft.AspNetCore.Mvc;
    using global::Refit;
    using global::System;
    using global::System.Collections.Generic;
    using global::System.Linq;
    using global::System.Threading.Tasks;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIOrderInfoApi : IOrderInfoApi
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIOrderInfoApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<List<OrderInfoResponse>>>> IOrderInfoApi.List()
        {
            var arguments = new object[] {  };
            var func = requestBuilder.BuildRestResultFuncForMethod("List", new Type[] {  });
            return (Task<ApiResponse<WebApiResponse<List<OrderInfoResponse>>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<OrderInfoResponse>>> IOrderInfoApi.Get(Guid id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", new Type[] { typeof(Guid) });
            return (Task<ApiResponse<WebApiResponse<OrderInfoResponse>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<OrderInfoResponse>>> IOrderInfoApi.Post(OrderInfoRequest request)
        {
            var arguments = new object[] { request };
            var func = requestBuilder.BuildRestResultFuncForMethod("Post", new Type[] { typeof(OrderInfoRequest) });
            return (Task<ApiResponse<WebApiResponse<OrderInfoResponse>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<OrderInfoResponse>>> IOrderInfoApi.Put(Guid id, OrderInfoRequest request)
        {
            var arguments = new object[] { id, request };
            var func = requestBuilder.BuildRestResultFuncForMethod("Put", new Type[] { typeof(Guid), typeof(OrderInfoRequest) });
            return (Task<ApiResponse<WebApiResponse<OrderInfoResponse>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<OrderInfoResponse>>> IOrderInfoApi.Delete(Guid id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("Delete", new Type[] { typeof(Guid) });
            return (Task<ApiResponse<WebApiResponse<OrderInfoResponse>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<bool>>> IOrderInfoApi.Activate(Guid id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("Activate", new Type[] { typeof(Guid) });
            return (Task<ApiResponse<WebApiResponse<bool>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<List<OrderInfoResponse>>>> IOrderInfoApi.GetActive()
        {
            var arguments = new object[] {  };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetActive", new Type[] {  });
            return (Task<ApiResponse<WebApiResponse<List<OrderInfoResponse>>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<List<OrderInfoResponse>>>> IOrderInfoApi.GetByUserId(Guid id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetByUserId", new Type[] { typeof(Guid) });
            return (Task<ApiResponse<WebApiResponse<List<OrderInfoResponse>>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<List<OrderInfoResponse>>>> IOrderInfoApi.GetByShipmentInfoId(Guid id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetByShipmentInfoId", new Type[] { typeof(Guid) });
            return (Task<ApiResponse<WebApiResponse<List<OrderInfoResponse>>>>)func(Client, arguments);
        }
    }
}

namespace CommercialSite.Web.UI.APIs
{
    using global::CommercialSite.Common.DTOs.Product;
    using global::CommercialSite.Common.Models;
    using global::Microsoft.AspNetCore.Mvc;
    using global::Refit;
    using global::System;
    using global::System.Collections.Generic;
    using global::System.Linq;
    using global::System.Threading.Tasks;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIProductApi : IProductApi
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIProductApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<List<ProductResponse>>>> IProductApi.List()
        {
            var arguments = new object[] {  };
            var func = requestBuilder.BuildRestResultFuncForMethod("List", new Type[] {  });
            return (Task<ApiResponse<WebApiResponse<List<ProductResponse>>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<ProductResponse>>> IProductApi.Get(Guid id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", new Type[] { typeof(Guid) });
            return (Task<ApiResponse<WebApiResponse<ProductResponse>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<ProductResponse>>> IProductApi.Post(ProductRequest request)
        {
            var arguments = new object[] { request };
            var func = requestBuilder.BuildRestResultFuncForMethod("Post", new Type[] { typeof(ProductRequest) });
            return (Task<ApiResponse<WebApiResponse<ProductResponse>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<ProductResponse>>> IProductApi.Put(Guid id, ProductRequest request)
        {
            var arguments = new object[] { id, request };
            var func = requestBuilder.BuildRestResultFuncForMethod("Put", new Type[] { typeof(Guid), typeof(ProductRequest) });
            return (Task<ApiResponse<WebApiResponse<ProductResponse>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<ProductResponse>>> IProductApi.Delete(Guid id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("Delete", new Type[] { typeof(Guid) });
            return (Task<ApiResponse<WebApiResponse<ProductResponse>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<bool>>> IProductApi.Activate(Guid id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("Activate", new Type[] { typeof(Guid) });
            return (Task<ApiResponse<WebApiResponse<bool>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<List<ProductResponse>>>> IProductApi.GetActive()
        {
            var arguments = new object[] {  };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetActive", new Type[] {  });
            return (Task<ApiResponse<WebApiResponse<List<ProductResponse>>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<List<ProductResponse>>>> IProductApi.GetByCategoryId(Guid id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetByCategoryId", new Type[] { typeof(Guid) });
            return (Task<ApiResponse<WebApiResponse<List<ProductResponse>>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<List<ProductResponse>>>> IProductApi.GetByBrandId(Guid id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetByBrandId", new Type[] { typeof(Guid) });
            return (Task<ApiResponse<WebApiResponse<List<ProductResponse>>>>)func(Client, arguments);
        }
    }
}

namespace CommercialSite.Web.UI.APIs
{
    using global::CommercialSite.Common.DTOs.ProductComment;
    using global::CommercialSite.Common.Models;
    using global::Microsoft.AspNetCore.Mvc;
    using global::Refit;
    using global::System;
    using global::System.Collections.Generic;
    using global::System.Linq;
    using global::System.Threading.Tasks;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIProductCommentApi : IProductCommentApi
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIProductCommentApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<List<ProductCommentResponse>>>> IProductCommentApi.List()
        {
            var arguments = new object[] {  };
            var func = requestBuilder.BuildRestResultFuncForMethod("List", new Type[] {  });
            return (Task<ApiResponse<WebApiResponse<List<ProductCommentResponse>>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<ProductCommentResponse>>> IProductCommentApi.Get(Guid id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", new Type[] { typeof(Guid) });
            return (Task<ApiResponse<WebApiResponse<ProductCommentResponse>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<ProductCommentResponse>>> IProductCommentApi.Post(ProductCommentRequest request)
        {
            var arguments = new object[] { request };
            var func = requestBuilder.BuildRestResultFuncForMethod("Post", new Type[] { typeof(ProductCommentRequest) });
            return (Task<ApiResponse<WebApiResponse<ProductCommentResponse>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<ProductCommentResponse>>> IProductCommentApi.Put(Guid id, ProductCommentRequest request)
        {
            var arguments = new object[] { id, request };
            var func = requestBuilder.BuildRestResultFuncForMethod("Put", new Type[] { typeof(Guid), typeof(ProductCommentRequest) });
            return (Task<ApiResponse<WebApiResponse<ProductCommentResponse>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<ProductCommentResponse>>> IProductCommentApi.Delete(Guid id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("Delete", new Type[] { typeof(Guid) });
            return (Task<ApiResponse<WebApiResponse<ProductCommentResponse>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<bool>>> IProductCommentApi.Activate(Guid id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("Activate", new Type[] { typeof(Guid) });
            return (Task<ApiResponse<WebApiResponse<bool>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<List<ProductCommentResponse>>>> IProductCommentApi.GetActive()
        {
            var arguments = new object[] {  };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetActive", new Type[] {  });
            return (Task<ApiResponse<WebApiResponse<List<ProductCommentResponse>>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<List<ProductCommentResponse>>>> IProductCommentApi.GetByProductId(Guid id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetByProductId", new Type[] { typeof(Guid) });
            return (Task<ApiResponse<WebApiResponse<List<ProductCommentResponse>>>>)func(Client, arguments);
        }
    }
}

namespace CommercialSite.Web.UI.APIs
{
    using global::CommercialSite.Common.DTOs.ProductDetail;
    using global::CommercialSite.Common.Models;
    using global::Microsoft.AspNetCore.Mvc;
    using global::Refit;
    using global::System;
    using global::System.Collections.Generic;
    using global::System.Linq;
    using global::System.Threading.Tasks;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIProductDetailApi : IProductDetailApi
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIProductDetailApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<List<ProductDetailResponse>>>> IProductDetailApi.List()
        {
            var arguments = new object[] {  };
            var func = requestBuilder.BuildRestResultFuncForMethod("List", new Type[] {  });
            return (Task<ApiResponse<WebApiResponse<List<ProductDetailResponse>>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<ProductDetailResponse>>> IProductDetailApi.Get(Guid id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", new Type[] { typeof(Guid) });
            return (Task<ApiResponse<WebApiResponse<ProductDetailResponse>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<ProductDetailResponse>>> IProductDetailApi.Post(ProductDetailRequest request)
        {
            var arguments = new object[] { request };
            var func = requestBuilder.BuildRestResultFuncForMethod("Post", new Type[] { typeof(ProductDetailRequest) });
            return (Task<ApiResponse<WebApiResponse<ProductDetailResponse>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<ProductDetailResponse>>> IProductDetailApi.Put(Guid id, ProductDetailRequest request)
        {
            var arguments = new object[] { id, request };
            var func = requestBuilder.BuildRestResultFuncForMethod("Put", new Type[] { typeof(Guid), typeof(ProductDetailRequest) });
            return (Task<ApiResponse<WebApiResponse<ProductDetailResponse>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<ProductDetailResponse>>> IProductDetailApi.Delete(Guid id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("Delete", new Type[] { typeof(Guid) });
            return (Task<ApiResponse<WebApiResponse<ProductDetailResponse>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<bool>>> IProductDetailApi.Activate(Guid id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("Activate", new Type[] { typeof(Guid) });
            return (Task<ApiResponse<WebApiResponse<bool>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<List<ProductDetailResponse>>>> IProductDetailApi.GetActive()
        {
            var arguments = new object[] {  };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetActive", new Type[] {  });
            return (Task<ApiResponse<WebApiResponse<List<ProductDetailResponse>>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<List<ProductDetailResponse>>>> IProductDetailApi.GetByProductId(Guid id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetByProductId", new Type[] { typeof(Guid) });
            return (Task<ApiResponse<WebApiResponse<List<ProductDetailResponse>>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<List<ProductDetailResponse>>>> IProductDetailApi.GetByProductCommentId(Guid id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetByProductCommentId", new Type[] { typeof(Guid) });
            return (Task<ApiResponse<WebApiResponse<List<ProductDetailResponse>>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<List<ProductDetailResponse>>>> IProductDetailApi.GetByProductImageId(Guid id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetByProductImageId", new Type[] { typeof(Guid) });
            return (Task<ApiResponse<WebApiResponse<List<ProductDetailResponse>>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<List<ProductDetailResponse>>>> IProductDetailApi.GetByProductPropertyId(Guid id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetByProductPropertyId", new Type[] { typeof(Guid) });
            return (Task<ApiResponse<WebApiResponse<List<ProductDetailResponse>>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<List<ProductDetailResponse>>>> IProductDetailApi.GetByShippingSettingId(Guid id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetByShippingSettingId", new Type[] { typeof(Guid) });
            return (Task<ApiResponse<WebApiResponse<List<ProductDetailResponse>>>>)func(Client, arguments);
        }
    }
}

namespace CommercialSite.Web.UI.APIs
{
    using global::CommercialSite.Common.DTOs.ProductImage;
    using global::CommercialSite.Common.Models;
    using global::Microsoft.AspNetCore.Mvc;
    using global::Refit;
    using global::System;
    using global::System.Collections.Generic;
    using global::System.Linq;
    using global::System.Threading.Tasks;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIProductImageApi : IProductImageApi
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIProductImageApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<List<ProductImageResponse>>>> IProductImageApi.List()
        {
            var arguments = new object[] {  };
            var func = requestBuilder.BuildRestResultFuncForMethod("List", new Type[] {  });
            return (Task<ApiResponse<WebApiResponse<List<ProductImageResponse>>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<ProductImageResponse>>> IProductImageApi.Get(Guid id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", new Type[] { typeof(Guid) });
            return (Task<ApiResponse<WebApiResponse<ProductImageResponse>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<ProductImageResponse>>> IProductImageApi.Post(ProductImageRequest request)
        {
            var arguments = new object[] { request };
            var func = requestBuilder.BuildRestResultFuncForMethod("Post", new Type[] { typeof(ProductImageRequest) });
            return (Task<ApiResponse<WebApiResponse<ProductImageResponse>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<ProductImageResponse>>> IProductImageApi.Put(Guid id, ProductImageRequest request)
        {
            var arguments = new object[] { id, request };
            var func = requestBuilder.BuildRestResultFuncForMethod("Put", new Type[] { typeof(Guid), typeof(ProductImageRequest) });
            return (Task<ApiResponse<WebApiResponse<ProductImageResponse>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<ProductImageResponse>>> IProductImageApi.Delete(Guid id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("Delete", new Type[] { typeof(Guid) });
            return (Task<ApiResponse<WebApiResponse<ProductImageResponse>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<bool>>> IProductImageApi.Activate(Guid id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("Activate", new Type[] { typeof(Guid) });
            return (Task<ApiResponse<WebApiResponse<bool>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<List<ProductImageResponse>>>> IProductImageApi.GetActive()
        {
            var arguments = new object[] {  };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetActive", new Type[] {  });
            return (Task<ApiResponse<WebApiResponse<List<ProductImageResponse>>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<List<ProductImageResponse>>>> IProductImageApi.GetByProductId(Guid id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetByProductId", new Type[] { typeof(Guid) });
            return (Task<ApiResponse<WebApiResponse<List<ProductImageResponse>>>>)func(Client, arguments);
        }
    }
}

namespace CommercialSite.Web.UI.APIs
{
    using global::CommercialSite.Common.DTOs.ProductProperty;
    using global::CommercialSite.Common.Models;
    using global::Microsoft.AspNetCore.Mvc;
    using global::Refit;
    using global::System;
    using global::System.Collections.Generic;
    using global::System.Threading.Tasks;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIProductPropertyApi : IProductPropertyApi
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIProductPropertyApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<List<ProductPropertyResponse>>>> IProductPropertyApi.List()
        {
            var arguments = new object[] {  };
            var func = requestBuilder.BuildRestResultFuncForMethod("List", new Type[] {  });
            return (Task<ApiResponse<WebApiResponse<List<ProductPropertyResponse>>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<ProductPropertyResponse>>> IProductPropertyApi.Get(Guid id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", new Type[] { typeof(Guid) });
            return (Task<ApiResponse<WebApiResponse<ProductPropertyResponse>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<ProductPropertyResponse>>> IProductPropertyApi.Post(ProductPropertyRequest request)
        {
            var arguments = new object[] { request };
            var func = requestBuilder.BuildRestResultFuncForMethod("Post", new Type[] { typeof(ProductPropertyRequest) });
            return (Task<ApiResponse<WebApiResponse<ProductPropertyResponse>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<ProductPropertyResponse>>> IProductPropertyApi.Put(Guid id, ProductPropertyRequest request)
        {
            var arguments = new object[] { id, request };
            var func = requestBuilder.BuildRestResultFuncForMethod("Put", new Type[] { typeof(Guid), typeof(ProductPropertyRequest) });
            return (Task<ApiResponse<WebApiResponse<ProductPropertyResponse>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<ProductPropertyResponse>>> IProductPropertyApi.Delete(Guid id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("Delete", new Type[] { typeof(Guid) });
            return (Task<ApiResponse<WebApiResponse<ProductPropertyResponse>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<bool>>> IProductPropertyApi.Activate(Guid id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("Activate", new Type[] { typeof(Guid) });
            return (Task<ApiResponse<WebApiResponse<bool>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<List<ProductPropertyResponse>>>> IProductPropertyApi.GetActive()
        {
            var arguments = new object[] {  };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetActive", new Type[] {  });
            return (Task<ApiResponse<WebApiResponse<List<ProductPropertyResponse>>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<List<ProductPropertyResponse>>>> IProductPropertyApi.GetByProductId(Guid id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetByProductId", new Type[] { typeof(Guid) });
            return (Task<ApiResponse<WebApiResponse<List<ProductPropertyResponse>>>>)func(Client, arguments);
        }
    }
}

namespace CommercialSite.Web.UI.APIs
{
    using global::CommercialSite.Common.DTOs.ShipmentInfo;
    using global::CommercialSite.Common.Models;
    using global::Microsoft.AspNetCore.Mvc;
    using global::Refit;
    using global::System;
    using global::System.Collections.Generic;
    using global::System.Linq;
    using global::System.Threading.Tasks;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIShipmentInfoApi : IShipmentInfoApi
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIShipmentInfoApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<List<ShipmentInfoResponse>>>> IShipmentInfoApi.List()
        {
            var arguments = new object[] {  };
            var func = requestBuilder.BuildRestResultFuncForMethod("List", new Type[] {  });
            return (Task<ApiResponse<WebApiResponse<List<ShipmentInfoResponse>>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<ShipmentInfoResponse>>> IShipmentInfoApi.Get(Guid id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", new Type[] { typeof(Guid) });
            return (Task<ApiResponse<WebApiResponse<ShipmentInfoResponse>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<ShipmentInfoResponse>>> IShipmentInfoApi.Post(ShipmentInfoRequest request)
        {
            var arguments = new object[] { request };
            var func = requestBuilder.BuildRestResultFuncForMethod("Post", new Type[] { typeof(ShipmentInfoRequest) });
            return (Task<ApiResponse<WebApiResponse<ShipmentInfoResponse>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<ShipmentInfoResponse>>> IShipmentInfoApi.Put(Guid id, ShipmentInfoRequest request)
        {
            var arguments = new object[] { id, request };
            var func = requestBuilder.BuildRestResultFuncForMethod("Put", new Type[] { typeof(Guid), typeof(ShipmentInfoRequest) });
            return (Task<ApiResponse<WebApiResponse<ShipmentInfoResponse>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<ShipmentInfoResponse>>> IShipmentInfoApi.Delete(Guid id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("Delete", new Type[] { typeof(Guid) });
            return (Task<ApiResponse<WebApiResponse<ShipmentInfoResponse>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<bool>>> IShipmentInfoApi.Activate(Guid id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("Activate", new Type[] { typeof(Guid) });
            return (Task<ApiResponse<WebApiResponse<bool>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<List<ShipmentInfoResponse>>>> IShipmentInfoApi.GetActive()
        {
            var arguments = new object[] {  };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetActive", new Type[] {  });
            return (Task<ApiResponse<WebApiResponse<List<ShipmentInfoResponse>>>>)func(Client, arguments);
        }
    }
}

namespace CommercialSite.Web.UI.APIs
{
    using global::CommercialSite.Common.DTOs.ShippingAddress;
    using global::CommercialSite.Common.Models;
    using global::Microsoft.AspNetCore.Mvc;
    using global::Refit;
    using global::System;
    using global::System.Collections.Generic;
    using global::System.Linq;
    using global::System.Threading.Tasks;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIShippingAddressApi : IShippingAddressApi
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIShippingAddressApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<List<ShippingAddressResponse>>>> IShippingAddressApi.List()
        {
            var arguments = new object[] {  };
            var func = requestBuilder.BuildRestResultFuncForMethod("List", new Type[] {  });
            return (Task<ApiResponse<WebApiResponse<List<ShippingAddressResponse>>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<ShippingAddressResponse>>> IShippingAddressApi.Get(Guid id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", new Type[] { typeof(Guid) });
            return (Task<ApiResponse<WebApiResponse<ShippingAddressResponse>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<ShippingAddressResponse>>> IShippingAddressApi.Post(ShippingAddressRequest request)
        {
            var arguments = new object[] { request };
            var func = requestBuilder.BuildRestResultFuncForMethod("Post", new Type[] { typeof(ShippingAddressRequest) });
            return (Task<ApiResponse<WebApiResponse<ShippingAddressResponse>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<ShippingAddressResponse>>> IShippingAddressApi.Put(Guid id, ShippingAddressRequest request)
        {
            var arguments = new object[] { id, request };
            var func = requestBuilder.BuildRestResultFuncForMethod("Put", new Type[] { typeof(Guid), typeof(ShippingAddressRequest) });
            return (Task<ApiResponse<WebApiResponse<ShippingAddressResponse>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<ShippingAddressResponse>>> IShippingAddressApi.Delete(Guid id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("Delete", new Type[] { typeof(Guid) });
            return (Task<ApiResponse<WebApiResponse<ShippingAddressResponse>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<bool>>> IShippingAddressApi.Activate(Guid id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("Activate", new Type[] { typeof(Guid) });
            return (Task<ApiResponse<WebApiResponse<bool>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<List<ShippingAddressResponse>>>> IShippingAddressApi.GetActive()
        {
            var arguments = new object[] {  };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetActive", new Type[] {  });
            return (Task<ApiResponse<WebApiResponse<List<ShippingAddressResponse>>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<List<ShippingAddressResponse>>>> IShippingAddressApi.GetByUserId(Guid id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetByUserId", new Type[] { typeof(Guid) });
            return (Task<ApiResponse<WebApiResponse<List<ShippingAddressResponse>>>>)func(Client, arguments);
        }
    }
}

namespace CommercialSite.Web.UI.APIs
{
    using global::CommercialSite.Common.DTOs.ProductProperty;
    using global::CommercialSite.Common.DTOs.ShippingSetting;
    using global::CommercialSite.Common.Models;
    using global::Microsoft.AspNetCore.Mvc;
    using global::Refit;
    using global::System;
    using global::System.Collections.Generic;
    using global::System.Threading.Tasks;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIShippingSettingApi : IShippingSettingApi
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIShippingSettingApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<List<ShippingSettingResponse>>>> IShippingSettingApi.List()
        {
            var arguments = new object[] {  };
            var func = requestBuilder.BuildRestResultFuncForMethod("List", new Type[] {  });
            return (Task<ApiResponse<WebApiResponse<List<ShippingSettingResponse>>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<ShippingSettingResponse>>> IShippingSettingApi.Get(Guid id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", new Type[] { typeof(Guid) });
            return (Task<ApiResponse<WebApiResponse<ShippingSettingResponse>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<ShippingSettingResponse>>> IShippingSettingApi.Post(ShippingSettingRequest request)
        {
            var arguments = new object[] { request };
            var func = requestBuilder.BuildRestResultFuncForMethod("Post", new Type[] { typeof(ShippingSettingRequest) });
            return (Task<ApiResponse<WebApiResponse<ShippingSettingResponse>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<ShippingSettingResponse>>> IShippingSettingApi.Put(Guid id, ShippingSettingRequest request)
        {
            var arguments = new object[] { id, request };
            var func = requestBuilder.BuildRestResultFuncForMethod("Put", new Type[] { typeof(Guid), typeof(ShippingSettingRequest) });
            return (Task<ApiResponse<WebApiResponse<ShippingSettingResponse>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<ShippingSettingResponse>>> IShippingSettingApi.Delete(Guid id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("Delete", new Type[] { typeof(Guid) });
            return (Task<ApiResponse<WebApiResponse<ShippingSettingResponse>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<bool>>> IShippingSettingApi.Activate(Guid id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("Activate", new Type[] { typeof(Guid) });
            return (Task<ApiResponse<WebApiResponse<bool>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<List<ShippingSettingResponse>>>> IShippingSettingApi.GetActive()
        {
            var arguments = new object[] {  };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetActive", new Type[] {  });
            return (Task<ApiResponse<WebApiResponse<List<ShippingSettingResponse>>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<List<ShippingSettingResponse>>>> IShippingSettingApi.GetByProductId(Guid id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetByProductId", new Type[] { typeof(Guid) });
            return (Task<ApiResponse<WebApiResponse<List<ShippingSettingResponse>>>>)func(Client, arguments);
        }
    }
}

namespace CommercialSite.Web.UI.APIs
{
    using global::CommercialSite.Common.DTOs.User;
    using global::CommercialSite.Common.Models;
    using global::Microsoft.AspNetCore.Mvc;
    using global::Refit;
    using global::System;
    using global::System.Collections.Generic;
    using global::System.Linq;
    using global::System.Threading.Tasks;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIUserApi : IUserApi
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIUserApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<List<UserResponse>>>> IUserApi.List()
        {
            var arguments = new object[] {  };
            var func = requestBuilder.BuildRestResultFuncForMethod("List", new Type[] {  });
            return (Task<ApiResponse<WebApiResponse<List<UserResponse>>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<UserResponse>>> IUserApi.Get(Guid id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", new Type[] { typeof(Guid) });
            return (Task<ApiResponse<WebApiResponse<UserResponse>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<UserResponse>>> IUserApi.Post(UserRequest request)
        {
            var arguments = new object[] { request };
            var func = requestBuilder.BuildRestResultFuncForMethod("Post", new Type[] { typeof(UserRequest) });
            return (Task<ApiResponse<WebApiResponse<UserResponse>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<UserResponse>>> IUserApi.Put(Guid id, UserRequest request)
        {
            var arguments = new object[] { id, request };
            var func = requestBuilder.BuildRestResultFuncForMethod("Put", new Type[] { typeof(Guid), typeof(UserRequest) });
            return (Task<ApiResponse<WebApiResponse<UserResponse>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<UserResponse>>> IUserApi.Delete(Guid id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("Delete", new Type[] { typeof(Guid) });
            return (Task<ApiResponse<WebApiResponse<UserResponse>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<bool>>> IUserApi.Activate(Guid id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("Activate", new Type[] { typeof(Guid) });
            return (Task<ApiResponse<WebApiResponse<bool>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<List<UserResponse>>>> IUserApi.GetActive()
        {
            var arguments = new object[] {  };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetActive", new Type[] {  });
            return (Task<ApiResponse<WebApiResponse<List<UserResponse>>>>)func(Client, arguments);
        }
    }
}

namespace CommercialSite.Web.UI.APIs
{
    using global::CommercialSite.Common.DTOs.UserDetail;
    using global::CommercialSite.Common.Models;
    using global::Microsoft.AspNetCore.Mvc;
    using global::Refit;
    using global::System;
    using global::System.Collections.Generic;
    using global::System.Linq;
    using global::System.Threading.Tasks;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIUserDetailApi : IUserDetailApi
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIUserDetailApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<List<UserDetailResponse>>>> IUserDetailApi.List()
        {
            var arguments = new object[] {  };
            var func = requestBuilder.BuildRestResultFuncForMethod("List", new Type[] {  });
            return (Task<ApiResponse<WebApiResponse<List<UserDetailResponse>>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<UserDetailResponse>>> IUserDetailApi.Get(Guid id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", new Type[] { typeof(Guid) });
            return (Task<ApiResponse<WebApiResponse<UserDetailResponse>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<UserDetailResponse>>> IUserDetailApi.Post(UserDetailRequest request)
        {
            var arguments = new object[] { request };
            var func = requestBuilder.BuildRestResultFuncForMethod("Post", new Type[] { typeof(UserDetailRequest) });
            return (Task<ApiResponse<WebApiResponse<UserDetailResponse>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<UserDetailResponse>>> IUserDetailApi.Put(Guid id, UserDetailRequest request)
        {
            var arguments = new object[] { id, request };
            var func = requestBuilder.BuildRestResultFuncForMethod("Put", new Type[] { typeof(Guid), typeof(UserDetailRequest) });
            return (Task<ApiResponse<WebApiResponse<UserDetailResponse>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<UserDetailResponse>>> IUserDetailApi.Delete(Guid id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("Delete", new Type[] { typeof(Guid) });
            return (Task<ApiResponse<WebApiResponse<UserDetailResponse>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<bool>>> IUserDetailApi.Activate(Guid id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("Activate", new Type[] { typeof(Guid) });
            return (Task<ApiResponse<WebApiResponse<bool>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<List<UserDetailResponse>>>> IUserDetailApi.GetActive()
        {
            var arguments = new object[] {  };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetActive", new Type[] {  });
            return (Task<ApiResponse<WebApiResponse<List<UserDetailResponse>>>>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<ApiResponse<WebApiResponse<List<UserDetailResponse>>>> IUserDetailApi.GetByUserDetailId(Guid id)
        {
            var arguments = new object[] { id };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetByUserDetailId", new Type[] { typeof(Guid) });
            return (Task<ApiResponse<WebApiResponse<List<UserDetailResponse>>>>)func(Client, arguments);
        }
    }
}

#pragma warning restore CS8632 // The annotation for nullable reference types should only be used in code within a '#nullable' annotations context.
#pragma warning restore CS8669 // The annotation for nullable reference types should only be used in code within a '#nullable' annotations context. Auto-generated code requires an explicit '#nullable' directive in source.
